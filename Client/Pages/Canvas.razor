@page "/canvas"

@using BlazorSignalRApp.Shared.Models.OEE
@using Microsoft.AspNetCore.SignalR.Client
@using Blazor.Extensions
@using System.Threading
@inject NavigationManager NavigationManager
@inject HttpClient Http

@inherits CanvasComponent

<div>
    <h3>Real Time Dashboard</h3>
</div>
@if (_dashboardData == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
        @{i = 0;
            // Get first item to start iteration for layout
            RealTime lastItem = _dashboardData.First();
        }
        @foreach (var item in _dashboardData)
        {
                // Creates horizontal line to divide between lines
                if(item.LineId != lastItem.LineId)
                {
                    <hr style="width:90%;text-align:left;margin-left:0">
                }
                <div class="col text-center">
                    <BECanvas Width="250" Height="200" @ref="_canvasReference"></BECanvas>
                </div>
                i++;
                lastItem = item;
        }
        @{canvasListCreated = true;}
        @{
            if(!TimerInitialized)
            {
                DrawCallBack = new System.Threading.Timer(this.TimerRedraw, autoEvent, 1000, 1000);
                TimerInitialized = true;
            }
            else
            {
                
            }
        }
        </div>
    </div>
}


@code{
    private List<RealTime> EquipmentList;
    private HubConnection hubConnection;
    private bool LoadedData = false;
    AutoResetEvent autoEvent = new AutoResetEvent(false);
    private bool TimerInitialized = false;
    private Timer DrawCallBack;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()  
            .WithUrl(NavigationManager.ToAbsoluteUri("/oeeHub"))  
            .Build();  
  
        hubConnection.On("ReceiveMessage", () =>  
        {  
            CallLoadData();  
            StateHasChanged();  
        });

        await hubConnection.StartAsync();

        await LoadData();

        //InitializeCanvasReferenceList();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        EquipmentList = await Http.GetFromJsonAsync<List<RealTime>>("api/oee/realTime");
        _dashboardData = EquipmentList;

        StateHasChanged();
    }

    protected void InitializeCanvasReferenceList()
    {
        foreach (var item in _dashboardData)
        {
            _canvasReferenceList.Add(null);
        }
    }

    public bool IsConnected =>  
        hubConnection.State == HubConnectionState.Connected;  
  
    public void Dispose()  
    {  
        _ = hubConnection.DisposeAsync();  
    }

    public async void TimerRedraw(Object state)
    {
        AutoResetEvent autoEvent = (AutoResetEvent)state;
        StateHasChanged();
    }
}